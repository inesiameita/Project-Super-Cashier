# -*- coding: utf-8 -*-
"""Cashier

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q-jN0_lg5u0xGoOY9w8djXqwPR1QPnfM
"""

import pandas as pd
from tabulate import tabulate

class Transaction:
      def __init__(self):
          self.LIST_ITEM = dict()

          self.LIST_MENU = {1: ['Apel', 20_000], 2: ['Mangga', 25_000], 3: ['Jeruk', 30_000], 4: ['Semangka', 30_000], 5: ['Jambu', 10_000],
                       6: ['Alpukat', 28_000], 7: ['Pisang', 16_000], 8: ['Pepaya', 15_000], 9: ['Anggur', 45_000], 10: ['Nangka', 25_000]}
          
          table_LIST_MENU = pd.DataFrame(self.LIST_MENU).T
          header = ['No', 'Nama Item', 'Harga per Kg']
          print(f'Hello Customer, Selamat Datang! \nBerikut daftar buah yang tersedia minggu ini: \n' )
        
          print(f'Daftar Buah Terbaru - Katalog Toko Buah Baru Muncul')
          print(f'======================================')
          print(tabulate(table_LIST_MENU, header, tablefmt ='github'))


      def print_transaction(self):
          ''' This function is used to display the items purchased in order list as a table '''
          try:
              table_LIST_ITEM = pd.DataFrame(self.LIST_ITEM).T
              header = ['Nama Item', 'Jumlah Item' , 'Harga per Item' , 'Total Harga']
              print(f'\n\t\t\t DAFTAR BELANJA \t\t\t')
              print(f'==================================================================')
              print(tabulate(table_LIST_ITEM, header, tablefmt ='github'))
          
          except:
              print('Tidak ada list pembelian')


      def add_item(self):
          ''' This function is used to add the items purchased to order list '''
          try:
                jumlah = int(input('Masukkan jumlah item yang ditambahkan : '))
                print(f'==================================================================')
                index = 1
                while index < jumlah + 1:
                      print(f'List tambahan item ke - {index} :')
                      item_name = str(input('Nama item : ').upper()) 
                      item_qty = int(input('Jumlah item : '))
                      item_price = int(input('Harga item : '))
                      
                      self.LIST_ITEM.update({item_name: [item_qty, item_price, item_qty*item_price]} )

                      print(f'------------------------------------------------------------------')
                      print(f'Item yang ditambahkan : {item_name}, sejumlah {item_qty}, dengan harga per item {item_price}')
                      print(f'==================================================================')
              
                      index += 1
                            
                self.print_transaction()
                             
          except ValueError:
                 print("Terdapat kesalahan dalam inputan, mohon inputkan dengan angka.")
                 

      def update_item(self):
          ''' This function is used to edit / update the item name. 
              Item name will be updated by new item name. '''
          try:
              item_name = input('Nama item yang akan diganti  : ').upper()
              new_name = input('Diganti dengan nama item baru : ').upper()
              temp = self.LIST_ITEM[item_name]
              self.LIST_ITEM.pop(item_name)
              self.LIST_ITEM.update({new_name:temp})

              print(f'Item {item_name} diganti menjadi {new_name}.')
              self.print_transaction()

          except KeyError:
                 print(f'Nama item {item_name} tidak ada dalam list pembelian.')


      def update_item_qty(self):
          ''' This function is used to edit / update the item quantity. 
              Item quantity will be updated by new quantity based on item name changed. '''
          try:
              item_name = input('Nama item yang akan diganti jumlahnya : ').upper()
              new_qty = int(input('Diganti dengan jumlah item yang baru : '))
              item_price = self.LIST_ITEM[item_name][1]
              new_total_price = new_qty * item_price
              self.LIST_ITEM[item_name][0] = new_qty
              self.LIST_ITEM[item_name][2] = new_total_price

              print(f'Jumlah item {item_name} diganti menjadi sebanyak {new_qty}.')
              self.print_transaction()

          except KeyError:
                 print(f'Nama item {item_name} tidak ada dalam list pembelian.')
          except ValueError:
                 print("Terdapat kesalahan dalam inputan, mohon inputkan dengan angka.")


      def update_item_price(self):
          ''' This function is used to edit / update the item price. 
              Item price will be updated by new price based on item name changed. '''
          try:
              item_name = input('Nama item yang akan diganti jumlahnya : ').upper()
              new_price = int(input('Diganti dengan harga item yang baru : '))
              self.LIST_ITEM[item_name][1] = new_price
              self.LIST_ITEM[item_name][2] = self.LIST_ITEM[item_name][0] * new_price
              new_total_price = self.LIST_ITEM[item_name][2]

              print(f'Harga item {item_name} diganti menjadi sebesar Rp {new_price}. Total harga menjadi Rp {new_total_price}.')
              self.print_transaction()

          except KeyError:
                 print(f'Nama item {item_name} tidak ada dalam list pembelian.')
          except ValueError:
                 print("Terdapat kesalahan dalam inputan, mohon inputkan dengan angka.")


      def delete_item(self):
          ''' This function is used to cancel the item purchased. 
              The item will be deleted from order list. '''
          try:
              remove_item_name = input('Item yang akan dihapus : ').upper()
              self.LIST_ITEM.pop(remove_item_name) 
          
              print(f'Menghapus pesanan {remove_item_name}.')
              self.print_transaction()
          
          except KeyError:
              print(f'Nama item {remove_item_name} tidak ada dalam list pembelian.')
          except NameError:
              print(f'Tidak ada list pembelian.')
            

      def reset_transaction(self):
          ''' This function is used to reset the item purchased transaction. 
              All items will be deleted from order list '''
          self.LIST_ITEM = {}
          print(f'Semua pesanan telah terhapus.')
          self.print_transaction()


      def check_transaction(self):
          ''' This function is used to check the item purchased transaction. 
              All items will be checked wheter it is appropriate or not. '''
          self.print_transaction()

          for key, value in self.LIST_ITEM.items():
              item_name = key
              item_qty = value[0]
              item_price = value[1]           

              if type(item_name) == str and type(item_qty) == int and type(item_price) == int :
                  print(f'** Data pemesanan {item_name} sudah sesuai **')
                  pass
              else:
                  if  type(item_name) != str:
                      print('\nMohon diinputkan kembali, nama item harus berupa teks')
                  else:             
                      pass
                  if  type(item_qty) != int:    
                      print('\nMohon diinputkan kembali, jumlah item harus berupa angka')
                  else:      
                      pass    
                  if  type(item_price) != int:
                      print('\nMohon diinputkan kembali, harga item harus berupa angka')
                  else:
                      pass    


      def payment_transaction(self):
          ''' This function is used to calculate total transaction. 
              If total transaction is greater than the specified value, customer will get discount.
              Total payment is obtained from total transaction value minus discount value. '''

          discount_0 = 0
          discount_200000 = 5/100
          discount_300000 = 8/100
          discount_500000 = 10/100
          total_transaction = 0

          for key, value in self.LIST_ITEM.items():
              item_qty = value[0]
              item_price = value[1]
              total_price = item_qty * item_price
                
              total_transaction += total_price
                           
          if total_transaction > 500_000:
              discount = int(total_transaction * discount_500000)
              total_payment = int(total_transaction - discount)
              print(f'\nTOTAL BELANJA : Rp {total_transaction} - Rp {discount} = Rp {total_payment}')
              print(f'Selamat! Anda memperoleh discount sebesar Rp {discount}. Total belanja Anda menjadi Rp {total_payment} ')

          elif total_transaction > 300_000:
               discount = int(total_transaction * discount_300000)
               total_payment = int(total_transaction - discount)
               print(f'\nTOTAL BELANJA : Rp {total_transaction} - Rp {discount} = Rp {total_payment}')
               print(f'Selamat! Anda memperoleh discount sebesar Rp {discount}. Total belanja Anda menjadi Rp {total_payment} ')
            
          elif total_transaction > 200_000:
               discount = int(total_transaction * discount_200000)
               total_payment = int(total_transaction - discount)
               print(f'\nTOTAL BELANJA : Rp {total_transaction} - Rp {discount} = Rp {total_payment}')
               print(f'Selamat! Anda memperoleh discount sebesar Rp {discount}. Total belanja Anda menjadi Rp {total_payment} ')

          else:
               discount = int(total_transaction * discount_0)
               total_payment = int(total_transaction - discount)
               print(f'\nTOTAL BELANJA : Rp {total_transaction} - Rp {discount} = Rp {total_payment}')
               print(f'Anda tidak memperoleh discount. Total belanja Anda menjadi Rp {total_payment} ')