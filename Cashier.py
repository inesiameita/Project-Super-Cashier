{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN03cc/i+bBmECbSJ/OYAKd",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/inesiameita/Project-Super-Cashier/blob/main/Cashier.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "i-q2_qGYfzwU"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "from tabulate import tabulate\n",
        "\n",
        "class Transaction:\n",
        "      def __init__(self):\n",
        "          self.LIST_ITEM = dict()\n",
        "\n",
        "          self.LIST_MENU = {1: ['Apel', 20_000], 2: ['Mangga', 25_000], 3: ['Jeruk', 30_000], 4: ['Semangka', 30_000], 5: ['Jambu', 10_000],\n",
        "                       6: ['Alpukat', 28_000], 7: ['Pisang', 16_000], 8: ['Pepaya', 15_000], 9: ['Anggur', 45_000], 10: ['Nangka', 25_000]}\n",
        "          \n",
        "          table_LIST_MENU = pd.DataFrame(self.LIST_MENU).T\n",
        "          header = ['No', 'Nama Item', 'Harga per Kg']\n",
        "          print(f'Hello Customer, Selamat Datang! \\nBerikut daftar buah yang tersedia minggu ini: \\n' )\n",
        "        \n",
        "          print(f'Daftar Buah Terbaru - Katalog Toko Buah Baru Muncul')\n",
        "          print(f'======================================')\n",
        "          print(tabulate(table_LIST_MENU, header, tablefmt ='github'))\n",
        "\n",
        "\n",
        "      def print_transaction(self):\n",
        "          ''' This function is used to display the items purchased in order list as a table '''\n",
        "          try:\n",
        "              table_LIST_ITEM = pd.DataFrame(self.LIST_ITEM).T\n",
        "              header = ['Nama Item', 'Jumlah Item' , 'Harga per Item' , 'Total Harga']\n",
        "              print(f'\\n\\t\\t\\t DAFTAR BELANJA \\t\\t\\t')\n",
        "              print(f'==================================================================')\n",
        "              print(tabulate(table_LIST_ITEM, header, tablefmt ='github'))\n",
        "          \n",
        "          except:\n",
        "              print('Tidak ada list pembelian')\n",
        "\n",
        "\n",
        "      def add_item(self):\n",
        "          ''' This function is used to add the items purchased to order list '''\n",
        "          try:\n",
        "                jumlah = int(input('Masukkan jumlah item yang ditambahkan : '))\n",
        "                print(f'==================================================================')\n",
        "                index = 1\n",
        "                while index < jumlah + 1:\n",
        "                      print(f'List tambahan item ke - {index} :')\n",
        "                      item_name = str(input('Nama item : ').upper()) \n",
        "                      item_qty = int(input('Jumlah item : '))\n",
        "                      item_price = int(input('Harga item : '))\n",
        "                      \n",
        "                      self.LIST_ITEM.update({item_name: [item_qty, item_price, item_qty*item_price]} )\n",
        "\n",
        "                      print(f'------------------------------------------------------------------')\n",
        "                      print(f'Item yang ditambahkan : {item_name}, sejumlah {item_qty}, dengan harga per item {item_price}')\n",
        "                      print(f'==================================================================')\n",
        "              \n",
        "                      index += 1\n",
        "                            \n",
        "                self.print_transaction()\n",
        "                             \n",
        "          except ValueError:\n",
        "                 print(\"Terdapat kesalahan dalam inputan, mohon inputkan dengan angka.\")\n",
        "                 \n",
        "\n",
        "      def update_item(self):\n",
        "          ''' This function is used to edit / update the item name. \n",
        "              Item name will be updated by new item name. '''\n",
        "          try:\n",
        "              item_name = input('Nama item yang akan diganti  : ').upper()\n",
        "              new_name = input('Diganti dengan nama item baru : ').upper()\n",
        "              temp = self.LIST_ITEM[item_name]\n",
        "              self.LIST_ITEM.pop(item_name)\n",
        "              self.LIST_ITEM.update({new_name:temp})\n",
        "\n",
        "              print(f'Item {item_name} diganti menjadi {new_name}.')\n",
        "              self.print_transaction()\n",
        "\n",
        "          except KeyError:\n",
        "                 print(f'Nama item {item_name} tidak ada dalam list pembelian.')\n",
        "\n",
        "\n",
        "      def update_item_qty(self):\n",
        "          ''' This function is used to edit / update the item quantity. \n",
        "              Item quantity will be updated by new quantity based on item name changed. '''\n",
        "          try:\n",
        "              item_name = input('Nama item yang akan diganti jumlahnya : ').upper()\n",
        "              new_qty = int(input('Diganti dengan jumlah item yang baru : '))\n",
        "              item_price = self.LIST_ITEM[item_name][1]\n",
        "              new_total_price = new_qty * item_price\n",
        "              self.LIST_ITEM[item_name][0] = new_qty\n",
        "              self.LIST_ITEM[item_name][2] = new_total_price\n",
        "\n",
        "              print(f'Jumlah item {item_name} diganti menjadi sebanyak {new_qty}.')\n",
        "              self.print_transaction()\n",
        "\n",
        "          except KeyError:\n",
        "                 print(f'Nama item {item_name} tidak ada dalam list pembelian.')\n",
        "          except ValueError:\n",
        "                 print(\"Terdapat kesalahan dalam inputan, mohon inputkan dengan angka.\")\n",
        "\n",
        "\n",
        "      def update_item_price(self):\n",
        "          ''' This function is used to edit / update the item price. \n",
        "              Item price will be updated by new price based on item name changed. '''\n",
        "          try:\n",
        "              item_name = input('Nama item yang akan diganti jumlahnya : ').upper()\n",
        "              new_price = int(input('Diganti dengan harga item yang baru : '))\n",
        "              self.LIST_ITEM[item_name][1] = new_price\n",
        "              self.LIST_ITEM[item_name][2] = self.LIST_ITEM[item_name][0] * new_price\n",
        "              new_total_price = self.LIST_ITEM[item_name][2]\n",
        "\n",
        "              print(f'Harga item {item_name} diganti menjadi sebesar Rp {new_price}. Total harga menjadi Rp {new_total_price}.')\n",
        "              self.print_transaction()\n",
        "\n",
        "          except KeyError:\n",
        "                 print(f'Nama item {item_name} tidak ada dalam list pembelian.')\n",
        "          except ValueError:\n",
        "                 print(\"Terdapat kesalahan dalam inputan, mohon inputkan dengan angka.\")\n",
        "\n",
        "\n",
        "      def delete_item(self):\n",
        "          ''' This function is used to cancel the item purchased. \n",
        "              The item will be deleted from order list. '''\n",
        "          try:\n",
        "              remove_item_name = input('Item yang akan dihapus : ').upper()\n",
        "              self.LIST_ITEM.pop(remove_item_name) \n",
        "          \n",
        "              print(f'Menghapus pesanan {remove_item_name}.')\n",
        "              self.print_transaction()\n",
        "          \n",
        "          except KeyError:\n",
        "              print(f'Nama item {remove_item_name} tidak ada dalam list pembelian.')\n",
        "          except NameError:\n",
        "              print(f'Tidak ada list pembelian.')\n",
        "            \n",
        "\n",
        "      def reset_transaction(self):\n",
        "          ''' This function is used to reset the item purchased transaction. \n",
        "              All items will be deleted from order list '''\n",
        "          self.LIST_ITEM = {}\n",
        "          print(f'Semua pesanan telah terhapus.')\n",
        "          self.print_transaction()\n",
        "\n",
        "\n",
        "      def check_transaction(self):\n",
        "          ''' This function is used to check the item purchased transaction. \n",
        "              All items will be checked wheter it is appropriate or not. '''\n",
        "          self.print_transaction()\n",
        "\n",
        "          for key, value in self.LIST_ITEM.items():\n",
        "              item_name = key\n",
        "              item_qty = value[0]\n",
        "              item_price = value[1]           \n",
        "\n",
        "              if type(item_name) == str and type(item_qty) == int and type(item_price) == int :\n",
        "                  print(f'** Data pemesanan {item_name} sudah sesuai **')\n",
        "                  pass\n",
        "              else:\n",
        "                  if  type(item_name) != str:\n",
        "                      print('\\nMohon diinputkan kembali, nama item harus berupa teks')\n",
        "                  else:             \n",
        "                      pass\n",
        "                  if  type(item_qty) != int:    \n",
        "                      print('\\nMohon diinputkan kembali, jumlah item harus berupa angka')\n",
        "                  else:      \n",
        "                      pass    \n",
        "                  if  type(item_price) != int:\n",
        "                      print('\\nMohon diinputkan kembali, harga item harus berupa angka')\n",
        "                  else:\n",
        "                      pass    \n",
        "\n",
        "\n",
        "      def payment_transaction(self):\n",
        "          ''' This function is used to calculate total transaction. \n",
        "              If total transaction is greater than the specified value, customer will get discount.\n",
        "              Total payment is obtained from total transaction value minus discount value. '''\n",
        "\n",
        "          discount_0 = 0\n",
        "          discount_200000 = 5/100\n",
        "          discount_300000 = 8/100\n",
        "          discount_500000 = 10/100\n",
        "          total_transaction = 0\n",
        "\n",
        "          for key, value in self.LIST_ITEM.items():\n",
        "              item_qty = value[0]\n",
        "              item_price = value[1]\n",
        "              total_price = item_qty * item_price\n",
        "                \n",
        "              total_transaction += total_price\n",
        "                           \n",
        "          if total_transaction > 500_000:\n",
        "              discount = int(total_transaction * discount_500000)\n",
        "              total_payment = int(total_transaction - discount)\n",
        "              print(f'\\nTOTAL BELANJA : Rp {total_transaction} - Rp {discount} = Rp {total_payment}')\n",
        "              print(f'Selamat! Anda memperoleh discount sebesar Rp {discount}. Total belanja Anda menjadi Rp {total_payment} ')\n",
        "\n",
        "          elif total_transaction > 300_000:\n",
        "               discount = int(total_transaction * discount_300000)\n",
        "               total_payment = int(total_transaction - discount)\n",
        "               print(f'\\nTOTAL BELANJA : Rp {total_transaction} - Rp {discount} = Rp {total_payment}')\n",
        "               print(f'Selamat! Anda memperoleh discount sebesar Rp {discount}. Total belanja Anda menjadi Rp {total_payment} ')\n",
        "            \n",
        "          elif total_transaction > 200_000:\n",
        "               discount = int(total_transaction * discount_200000)\n",
        "               total_payment = int(total_transaction - discount)\n",
        "               print(f'\\nTOTAL BELANJA : Rp {total_transaction} - Rp {discount} = Rp {total_payment}')\n",
        "               print(f'Selamat! Anda memperoleh discount sebesar Rp {discount}. Total belanja Anda menjadi Rp {total_payment} ')\n",
        "\n",
        "          else:\n",
        "               discount = int(total_transaction * discount_0)\n",
        "               total_payment = int(total_transaction - discount)\n",
        "               print(f'\\nTOTAL BELANJA : Rp {total_transaction} - Rp {discount} = Rp {total_payment}')\n",
        "               print(f'Anda tidak memperoleh discount. Total belanja Anda menjadi Rp {total_payment} ')"
      ]
    }
  ]
}